#pragma once

// Auto-generated by scripts/translate-react.js
// Source: react-main/packages/react-reconciler/src/ReactFiber.js

#include "react-reconciler/ReactFiberFlags.h"
#include "react-reconciler/ReactFiberLane.h"
#include "react-reconciler/ReactTypeOfMode.h"
#include "react-reconciler/ReactWorkTags.h"
#include "react-reconciler/ReactRootTags.h"

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace react {

struct FiberNode {
  struct Dependencies {
    Lanes lanes{NoLanes};
    void* firstContext{nullptr};
  };

  WorkTag tag{WorkTag::IndeterminateComponent};
  std::string key{};
  const void* elementType{nullptr};
  const void* type{nullptr};
  void* stateNode{nullptr};

  FiberNode* returnFiber{nullptr};
  FiberNode* child{nullptr};
  FiberNode* sibling{nullptr};
  std::uint32_t index{0};

  void* ref{nullptr};
  void* refCleanup{nullptr};

  void* pendingProps{nullptr};
  void* memoizedProps{nullptr};
  void* updateQueue{nullptr};
  void* memoizedState{nullptr};
  std::unique_ptr<Dependencies> dependencies{};

  TypeOfMode mode{NoMode};

  FiberFlags flags{NoFlags};
  FiberFlags subtreeFlags{NoFlags};
  std::vector<FiberNode*> deletions{};

  Lanes lanes{NoLanes};
  Lanes childLanes{NoLanes};

  FiberNode* alternate{nullptr};

  double actualDuration{0.0};
  double actualStartTime{0.0};
  double selfBaseDuration{0.0};
  double treeBaseDuration{0.0};
};

FiberNode* createFiber(
    WorkTag tag,
    void* pendingProps = nullptr,
    std::string key = std::string{},
    TypeOfMode mode = NoMode);

FiberNode* createWorkInProgress(FiberNode* current, void* pendingProps);
FiberNode* resetWorkInProgress(FiberNode* workInProgress, Lanes renderLanes);
FiberNode* createHostRootFiber(RootTag tag, bool isStrictMode);

} // namespace react
