#pragma once

// Auto-generated by scripts/translate-react.js
// Source: react-main/packages/shared/ReactSymbols.js

#include <string_view>

#include "../shared/ReactFeatureFlags.h"
#include "jsi/jsi.h"

namespace react {

namespace jsi = facebook::jsi;

struct ReactSymbolDescriptor {
  enum class Kind { Registry, Builtin };

  constexpr ReactSymbolDescriptor(const char* identifier, Kind kind = Kind::Registry)
	  : identifier(identifier), kind(kind) {}

  constexpr bool operator==(const ReactSymbolDescriptor& other) const {
	return kind == other.kind && identifier == other.identifier;
  }

  const char* identifier;
  Kind kind;
};

inline constexpr ReactSymbolDescriptor REACT_LEGACY_ELEMENT_TYPE{"react.element"};
inline constexpr ReactSymbolDescriptor REACT_TRANSITIONAL_ELEMENT_TYPE{
	"react.transitional.element"};
inline constexpr ReactSymbolDescriptor REACT_ELEMENT_TYPE =
	renameElementSymbol ? REACT_TRANSITIONAL_ELEMENT_TYPE : REACT_LEGACY_ELEMENT_TYPE;
inline constexpr ReactSymbolDescriptor REACT_PORTAL_TYPE{"react.portal"};
inline constexpr ReactSymbolDescriptor REACT_FRAGMENT_TYPE{"react.fragment"};
inline constexpr ReactSymbolDescriptor REACT_STRICT_MODE_TYPE{"react.strict_mode"};
inline constexpr ReactSymbolDescriptor REACT_PROFILER_TYPE{"react.profiler"};
inline constexpr ReactSymbolDescriptor REACT_CONSUMER_TYPE{"react.consumer"};
inline constexpr ReactSymbolDescriptor REACT_CONTEXT_TYPE{"react.context"};
inline constexpr ReactSymbolDescriptor REACT_FORWARD_REF_TYPE{"react.forward_ref"};
inline constexpr ReactSymbolDescriptor REACT_SUSPENSE_TYPE{"react.suspense"};
inline constexpr ReactSymbolDescriptor REACT_SUSPENSE_LIST_TYPE{"react.suspense_list"};
inline constexpr ReactSymbolDescriptor REACT_MEMO_TYPE{"react.memo"};
inline constexpr ReactSymbolDescriptor REACT_LAZY_TYPE{"react.lazy"};
inline constexpr ReactSymbolDescriptor REACT_SCOPE_TYPE{"react.scope"};
inline constexpr ReactSymbolDescriptor REACT_ACTIVITY_TYPE{"react.activity"};
inline constexpr ReactSymbolDescriptor REACT_LEGACY_HIDDEN_TYPE{"react.legacy_hidden"};
inline constexpr ReactSymbolDescriptor REACT_TRACING_MARKER_TYPE{"react.tracing_marker"};
inline constexpr ReactSymbolDescriptor REACT_MEMO_CACHE_SENTINEL{
	"react.memo_cache_sentinel"};
inline constexpr ReactSymbolDescriptor REACT_POSTPONE_TYPE{"react.postpone"};
inline constexpr ReactSymbolDescriptor REACT_VIEW_TRANSITION_TYPE{"react.view_transition"};
inline constexpr ReactSymbolDescriptor ASYNC_ITERATOR{"asyncIterator",
	ReactSymbolDescriptor::Kind::Builtin};

jsi::Symbol resolveSymbol(jsi::Runtime& runtime, const ReactSymbolDescriptor& descriptor);

jsi::Value getIteratorFn(jsi::Runtime& runtime, const jsi::Value& maybeIterable);

} // namespace react
