#include "ReactSymbols.h"

// Auto-generated by scripts/translate-react.js
// Source: react-main/packages/shared/ReactSymbols.js

#include <array>
#include <stdexcept>
#include <utility>

namespace react {

namespace {

jsi::Symbol resolveRegistrySymbol(jsi::Runtime& runtime, const char* key) {
  auto symbolObject = runtime.global().getPropertyAsObject(runtime, "Symbol");
  auto symbolFor = symbolObject.getPropertyAsFunction(runtime, "for");
  auto keyString = jsi::String::createFromAscii(runtime, key);
  auto result = symbolFor.callWithThis(runtime, symbolObject, std::move(keyString));
  return result.getSymbol(runtime);
}

jsi::Symbol resolveBuiltinSymbol(jsi::Runtime& runtime, const char* property) {
  auto symbolObject = runtime.global().getPropertyAsObject(runtime, "Symbol");
  auto value = symbolObject.getProperty(runtime, property);
  return value.getSymbol(runtime);
}

jsi::Symbol resolveSymbolInternal(jsi::Runtime& runtime, const ReactSymbolDescriptor& descriptor) {
  if (descriptor.kind == ReactSymbolDescriptor::Kind::Registry) {
    return resolveRegistrySymbol(runtime, descriptor.identifier);
  }
  return resolveBuiltinSymbol(runtime, descriptor.identifier);
}

jsi::PropNameID symbolToPropNameID(jsi::Runtime& runtime, const jsi::Symbol& symbol) {
  return jsi::PropNameID::forSymbol(runtime, symbol);
}

jsi::Value getPropertyIfFunction(
    jsi::Runtime& runtime,
    const jsi::Object& object,
    const jsi::PropNameID& key) {
  if (!object.hasProperty(runtime, key)) {
    return jsi::Value::null();
  }

  auto value = object.getProperty(runtime, key);
  if (value.isObject()) {
    auto fnObject = value.getObject(runtime);
    if (fnObject.isFunction(runtime)) {
      return value;
    }
  }

  return jsi::Value::null();
}

} // namespace

jsi::Symbol resolveSymbol(jsi::Runtime& runtime, const ReactSymbolDescriptor& descriptor) {
  return resolveSymbolInternal(runtime, descriptor);
}

jsi::Value getIteratorFn(jsi::Runtime& runtime, const jsi::Value& maybeIterable) {
  if (maybeIterable.isNull() || maybeIterable.isUndefined()) {
    return jsi::Value::null();
  }

  if (!maybeIterable.isObject()) {
    return jsi::Value::null();
  }

  auto object = maybeIterable.getObject(runtime);

  const auto iteratorSymbol =
      resolveSymbolInternal(
          runtime,
          {"iterator", ReactSymbolDescriptor::Kind::Builtin});
  auto iteratorProp = symbolToPropNameID(runtime, iteratorSymbol);
  auto iteratorFn = getPropertyIfFunction(runtime, object, iteratorProp);
  if (!iteratorFn.isNull() && !iteratorFn.isUndefined()) {
    return iteratorFn;
  }

  // Fallback to @@iterator string key.
  auto fauxIteratorKey = jsi::PropNameID::forAscii(runtime, "@@iterator");
  auto fauxIteratorFn = getPropertyIfFunction(runtime, object, fauxIteratorKey);
  if (!fauxIteratorFn.isNull() && !fauxIteratorFn.isUndefined()) {
    return fauxIteratorFn;
  }

  return jsi::Value::null();
}

} // namespace react
