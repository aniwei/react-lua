#include "ReactSharedInternals.h"

// Auto-generated by scripts/translate-react.js
// Source: react-main/packages/shared/ReactSharedInternals.js

#include <stdexcept>
#include <utility>

namespace react {

namespace {

constexpr const char* kReactGlobalIdentifier = "React";

jsi::Object expectObject(jsi::Runtime& runtime, const jsi::Value& value, const char* message) {
	if (!value.isObject()) {
		throw std::runtime_error(message);
	}
	return value.getObject(runtime);
}

} // namespace

jsi::Object getReactSharedInternals(jsi::Runtime& runtime) {
	const auto global = runtime.global();
	if (!global.hasProperty(runtime, kReactGlobalIdentifier)) {
		throw std::runtime_error("Global React object not found when resolving ReactSharedInternals");
	}

	auto reactValue = global.getProperty(runtime, kReactGlobalIdentifier);
	auto reactModule = expectObject(runtime, reactValue, "Global React value must be an object");
	return getReactSharedInternals(runtime, reactModule);
}

jsi::Object getReactSharedInternals(jsi::Runtime& runtime, const jsi::Object& reactModule) {
	const auto exportKey = reactSharedInternalsProp(runtime, ReactSharedInternalsKeys::kExportName);
	if (!reactModule.hasProperty(runtime, exportKey)) {
		throw std::runtime_error("ReactSharedInternals export missing on provided React module");
	}

	auto internalsValue = reactModule.getProperty(runtime, exportKey);
	return expectObject(runtime, internalsValue, "ReactSharedInternals export must resolve to an object");
}

jsi::PropNameID reactSharedInternalsProp(jsi::Runtime& runtime, std::string_view key) {
	return jsi::PropNameID::forAscii(runtime, key.data(), key.length());
}

bool hasReactSharedInternalsProperty(
	jsi::Runtime& runtime,
	const jsi::Object& internals,
	std::string_view key) {
	const auto prop = reactSharedInternalsProp(runtime, key);
	return internals.hasProperty(runtime, prop);
}

jsi::Value getReactSharedInternalsProperty(
	jsi::Runtime& runtime,
	const jsi::Object& internals,
	std::string_view key) {
	if (!hasReactSharedInternalsProperty(runtime, internals, key)) {
		return jsi::Value::undefined();
	}
	const auto prop = reactSharedInternalsProp(runtime, key);
	return internals.getProperty(runtime, prop);
}

void setReactSharedInternalsProperty(
	jsi::Runtime& runtime,
	jsi::Object& internals,
	std::string_view key,
	jsi::Value value) {
	const auto prop = reactSharedInternalsProp(runtime, key);
	internals.setProperty(runtime, prop, std::move(value));
}

} // namespace react
