#pragma once

// Auto-generated by scripts/translate-react.js
// Source: react-main/packages/shared/ReactSharedInternals.js

#include <string_view>

#include "jsi/jsi.h"

namespace react {

namespace jsi = facebook::jsi;

namespace ReactSharedInternalsKeys {

inline constexpr std::string_view kExportName =
	"__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE";

// Core dispatcher slots
inline constexpr std::string_view kDispatcher = "H";
inline constexpr std::string_view kAsyncDispatcher = "A";
inline constexpr std::string_view kTransitionConfig = "T";
inline constexpr std::string_view kOnTransitionFinished = "S";
inline constexpr std::string_view kOnGestureTransitionFinished = "G";

// Taint runtime integration
inline constexpr std::string_view kTaintRegistryByteLengths = "TaintRegistryByteLengths";
inline constexpr std::string_view kTaintRegistryObjects = "TaintRegistryObjects";
inline constexpr std::string_view kTaintRegistryPendingRequests =
	"TaintRegistryPendingRequests";
inline constexpr std::string_view kTaintRegistryValues = "TaintRegistryValues";

// DEV-only and diagnostics helpers
inline constexpr std::string_view kActQueue = "actQueue";
inline constexpr std::string_view kAsyncTransitions = "asyncTransitions";
inline constexpr std::string_view kIsBatchingLegacy = "isBatchingLegacy";
inline constexpr std::string_view kDidScheduleLegacyUpdate = "didScheduleLegacyUpdate";
inline constexpr std::string_view kDidUsePromise = "didUsePromise";
inline constexpr std::string_view kThrownErrors = "thrownErrors";
inline constexpr std::string_view kGetCurrentStack = "getCurrentStack";
inline constexpr std::string_view kRecentlyCreatedOwnerStacks = "recentlyCreatedOwnerStacks";

} // namespace ReactSharedInternalsKeys

jsi::Object getReactSharedInternals(jsi::Runtime& runtime);

jsi::Object getReactSharedInternals(jsi::Runtime& runtime, const jsi::Object& reactModule);

jsi::PropNameID reactSharedInternalsProp(jsi::Runtime& runtime, std::string_view key);

bool hasReactSharedInternalsProperty(
	jsi::Runtime& runtime,
	const jsi::Object& internals,
	std::string_view key);

jsi::Value getReactSharedInternalsProperty(
	jsi::Runtime& runtime,
	const jsi::Object& internals,
	std::string_view key);

void setReactSharedInternalsProperty(
	jsi::Runtime& runtime,
	jsi::Object& internals,
	std::string_view key,
	jsi::Value value);

} // namespace react
